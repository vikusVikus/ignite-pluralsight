package com.pluralsight.duckair.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;

/**
 * Flights definition.
 * 
 * This file was generated by Ignite Web Console (03/21/2019, 13:45)
 **/
public class Flights implements Serializable {
    /** */
    private static final long serialVersionUID = 0L;

    /** Value for flightPlanId. */
    private String flightPlanId;

    /** Value for fleetId. */
    private String fleetId;

    /** Value for distance. */
    private String distance;

    /** Value for estimatedTimeEnroute. */
    private BigDecimal estimatedTimeEnroute;

    /** Value for flightCapacity. */
    private Integer flightCapacity;

    /** Value for passengerCount. */
    private Integer passengerCount;

    /** Value for flightNumber. */
    private Integer flightNumber;

    /** Value for departureDate. */
    private Date departureDate;

    /** Value for departureTime. */
    private Time departureTime;

    /** Value for arrivalTime. */
    private Time arrivalTime;

    /** Value for departureAirport. */
    private String departureAirport;

    /** Value for arrivalAirport. */
    private String arrivalAirport;

    /** Value for pilotId. */
    private String pilotId;

    /** Value for copilotId. */
    private String copilotId;

    /** Empty constructor. **/
    public Flights() {
        // No-op.
    }

    /** Full constructor. **/
    public Flights(String flightPlanId,
        String fleetId,
        String distance,
        BigDecimal estimatedTimeEnroute,
        Integer flightCapacity,
        Integer passengerCount,
        Integer flightNumber,
        Date departureDate,
        Time departureTime,
        Time arrivalTime,
        String departureAirport,
        String arrivalAirport,
        String pilotId,
        String copilotId) {
        this.flightPlanId = flightPlanId;
        this.fleetId = fleetId;
        this.distance = distance;
        this.estimatedTimeEnroute = estimatedTimeEnroute;
        this.flightCapacity = flightCapacity;
        this.passengerCount = passengerCount;
        this.flightNumber = flightNumber;
        this.departureDate = departureDate;
        this.departureTime = departureTime;
        this.arrivalTime = arrivalTime;
        this.departureAirport = departureAirport;
        this.arrivalAirport = arrivalAirport;
        this.pilotId = pilotId;
        this.copilotId = copilotId;
    }

    /**
     * Gets flightPlanId
     * 
     * @return Value for flightPlanId.
     **/
    public String getFlightPlanId() {
        return flightPlanId;
    }

    /**
     * Sets flightPlanId
     * 
     * @param flightPlanId New value for flightPlanId.
     **/
    public void setFlightPlanId(String flightPlanId) {
        this.flightPlanId = flightPlanId;
    }

    /**
     * Gets fleetId
     * 
     * @return Value for fleetId.
     **/
    public String getFleetId() {
        return fleetId;
    }

    /**
     * Sets fleetId
     * 
     * @param fleetId New value for fleetId.
     **/
    public void setFleetId(String fleetId) {
        this.fleetId = fleetId;
    }

    /**
     * Gets distance
     * 
     * @return Value for distance.
     **/
    public String getDistance() {
        return distance;
    }

    /**
     * Sets distance
     * 
     * @param distance New value for distance.
     **/
    public void setDistance(String distance) {
        this.distance = distance;
    }

    /**
     * Gets estimatedTimeEnroute
     * 
     * @return Value for estimatedTimeEnroute.
     **/
    public BigDecimal getEstimatedTimeEnroute() {
        return estimatedTimeEnroute;
    }

    /**
     * Sets estimatedTimeEnroute
     * 
     * @param estimatedTimeEnroute New value for estimatedTimeEnroute.
     **/
    public void setEstimatedTimeEnroute(BigDecimal estimatedTimeEnroute) {
        this.estimatedTimeEnroute = estimatedTimeEnroute;
    }

    /**
     * Gets flightCapacity
     * 
     * @return Value for flightCapacity.
     **/
    public Integer getFlightCapacity() {
        return flightCapacity;
    }

    /**
     * Sets flightCapacity
     * 
     * @param flightCapacity New value for flightCapacity.
     **/
    public void setFlightCapacity(Integer flightCapacity) {
        this.flightCapacity = flightCapacity;
    }

    /**
     * Gets passengerCount
     * 
     * @return Value for passengerCount.
     **/
    public Integer getPassengerCount() {
        return passengerCount;
    }

    /**
     * Sets passengerCount
     * 
     * @param passengerCount New value for passengerCount.
     **/
    public void setPassengerCount(Integer passengerCount) {
        this.passengerCount = passengerCount;
    }

    /**
     * Gets flightNumber
     * 
     * @return Value for flightNumber.
     **/
    public Integer getFlightNumber() {
        return flightNumber;
    }

    /**
     * Sets flightNumber
     * 
     * @param flightNumber New value for flightNumber.
     **/
    public void setFlightNumber(Integer flightNumber) {
        this.flightNumber = flightNumber;
    }

    /**
     * Gets departureDate
     * 
     * @return Value for departureDate.
     **/
    public Date getDepartureDate() {
        return departureDate;
    }

    /**
     * Sets departureDate
     * 
     * @param departureDate New value for departureDate.
     **/
    public void setDepartureDate(Date departureDate) {
        this.departureDate = departureDate;
    }

    /**
     * Gets departureTime
     * 
     * @return Value for departureTime.
     **/
    public Time getDepartureTime() {
        return departureTime;
    }

    /**
     * Sets departureTime
     * 
     * @param departureTime New value for departureTime.
     **/
    public void setDepartureTime(Time departureTime) {
        this.departureTime = departureTime;
    }

    /**
     * Gets arrivalTime
     * 
     * @return Value for arrivalTime.
     **/
    public Time getArrivalTime() {
        return arrivalTime;
    }

    /**
     * Sets arrivalTime
     * 
     * @param arrivalTime New value for arrivalTime.
     **/
    public void setArrivalTime(Time arrivalTime) {
        this.arrivalTime = arrivalTime;
    }

    /**
     * Gets departureAirport
     * 
     * @return Value for departureAirport.
     **/
    public String getDepartureAirport() {
        return departureAirport;
    }

    /**
     * Sets departureAirport
     * 
     * @param departureAirport New value for departureAirport.
     **/
    public void setDepartureAirport(String departureAirport) {
        this.departureAirport = departureAirport;
    }

    /**
     * Gets arrivalAirport
     * 
     * @return Value for arrivalAirport.
     **/
    public String getArrivalAirport() {
        return arrivalAirport;
    }

    /**
     * Sets arrivalAirport
     * 
     * @param arrivalAirport New value for arrivalAirport.
     **/
    public void setArrivalAirport(String arrivalAirport) {
        this.arrivalAirport = arrivalAirport;
    }

    /**
     * Gets pilotId
     * 
     * @return Value for pilotId.
     **/
    public String getPilotId() {
        return pilotId;
    }

    /**
     * Sets pilotId
     * 
     * @param pilotId New value for pilotId.
     **/
    public void setPilotId(String pilotId) {
        this.pilotId = pilotId;
    }

    /**
     * Gets copilotId
     * 
     * @return Value for copilotId.
     **/
    public String getCopilotId() {
        return copilotId;
    }

    /**
     * Sets copilotId
     * 
     * @param copilotId New value for copilotId.
     **/
    public void setCopilotId(String copilotId) {
        this.copilotId = copilotId;
    }

    /** {@inheritDoc} **/
    @Override public boolean equals(Object o) {
        if (this == o)
            return true;
        
        if (!(o instanceof Flights))
            return false;
        
        Flights that = (Flights)o;

        if (flightPlanId != null ? !flightPlanId.equals(that.flightPlanId) : that.flightPlanId != null)
            return false;
        

        if (fleetId != null ? !fleetId.equals(that.fleetId) : that.fleetId != null)
            return false;
        

        if (distance != null ? !distance.equals(that.distance) : that.distance != null)
            return false;
        

        if (estimatedTimeEnroute != null ? !estimatedTimeEnroute.equals(that.estimatedTimeEnroute) : that.estimatedTimeEnroute != null)
            return false;
        

        if (flightCapacity != null ? !flightCapacity.equals(that.flightCapacity) : that.flightCapacity != null)
            return false;
        

        if (passengerCount != null ? !passengerCount.equals(that.passengerCount) : that.passengerCount != null)
            return false;
        

        if (flightNumber != null ? !flightNumber.equals(that.flightNumber) : that.flightNumber != null)
            return false;
        

        if (departureDate != null ? !departureDate.equals(that.departureDate) : that.departureDate != null)
            return false;
        

        if (departureTime != null ? !departureTime.equals(that.departureTime) : that.departureTime != null)
            return false;
        

        if (arrivalTime != null ? !arrivalTime.equals(that.arrivalTime) : that.arrivalTime != null)
            return false;
        

        if (departureAirport != null ? !departureAirport.equals(that.departureAirport) : that.departureAirport != null)
            return false;
        

        if (arrivalAirport != null ? !arrivalAirport.equals(that.arrivalAirport) : that.arrivalAirport != null)
            return false;
        

        if (pilotId != null ? !pilotId.equals(that.pilotId) : that.pilotId != null)
            return false;
        

        if (copilotId != null ? !copilotId.equals(that.copilotId) : that.copilotId != null)
            return false;
        
        return true;
    }

    /** {@inheritDoc} **/
    @Override public int hashCode() {
        int res = flightPlanId != null ? flightPlanId.hashCode() : 0;

        res = 31 * res + (fleetId != null ? fleetId.hashCode() : 0);

        res = 31 * res + (distance != null ? distance.hashCode() : 0);

        res = 31 * res + (estimatedTimeEnroute != null ? estimatedTimeEnroute.hashCode() : 0);

        res = 31 * res + (flightCapacity != null ? flightCapacity.hashCode() : 0);

        res = 31 * res + (passengerCount != null ? passengerCount.hashCode() : 0);

        res = 31 * res + (flightNumber != null ? flightNumber.hashCode() : 0);

        res = 31 * res + (departureDate != null ? departureDate.hashCode() : 0);

        res = 31 * res + (departureTime != null ? departureTime.hashCode() : 0);

        res = 31 * res + (arrivalTime != null ? arrivalTime.hashCode() : 0);

        res = 31 * res + (departureAirport != null ? departureAirport.hashCode() : 0);

        res = 31 * res + (arrivalAirport != null ? arrivalAirport.hashCode() : 0);

        res = 31 * res + (pilotId != null ? pilotId.hashCode() : 0);

        res = 31 * res + (copilotId != null ? copilotId.hashCode() : 0);

        return res;
    }

    /** {@inheritDoc} **/
    @Override public String toString() {
        return "Flights [" + 
            "flightPlanId=" + flightPlanId + ", " + 
            "fleetId=" + fleetId + ", " + 
            "distance=" + distance + ", " + 
            "estimatedTimeEnroute=" + estimatedTimeEnroute + ", " + 
            "flightCapacity=" + flightCapacity + ", " + 
            "passengerCount=" + passengerCount + ", " + 
            "flightNumber=" + flightNumber + ", " + 
            "departureDate=" + departureDate + ", " + 
            "departureTime=" + departureTime + ", " + 
            "arrivalTime=" + arrivalTime + ", " + 
            "departureAirport=" + departureAirport + ", " + 
            "arrivalAirport=" + arrivalAirport + ", " + 
            "pilotId=" + pilotId + ", " + 
            "copilotId=" + copilotId +
        "]";
    }
}