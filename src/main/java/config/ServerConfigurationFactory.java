package config;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.Factory;
import javax.sql.DataSource;
import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.BasicJdbcDialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.DataRegionConfiguration;
import org.apache.ignite.configuration.DataStorageConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;

/** This file was generated by Ignite Web Console (03/21/2019, 13:45) **/
public class ServerConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /** Helper class for datasource creation. **/
    public static class DataSources {
        public static final ComboPooledDataSource INSTANCE_dsGeneric_DuckAirlines = createdsGeneric_DuckAirlines();

        private static ComboPooledDataSource createdsGeneric_DuckAirlines() {
            ComboPooledDataSource dsGeneric_DuckAirlines = new ComboPooledDataSource();

            dsGeneric_DuckAirlines.setJdbcUrl(props.getProperty("dsGeneric_DuckAirlines.jdbc.url"));
            dsGeneric_DuckAirlines.setUser(props.getProperty("dsGeneric_DuckAirlines.jdbc.username"));
            dsGeneric_DuckAirlines.setPassword(props.getProperty("dsGeneric_DuckAirlines.jdbc.password"));

            return dsGeneric_DuckAirlines;
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setIgniteInstanceName("DuckAirlines");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryVmIpFinder ipFinder = new TcpDiscoveryVmIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        DataStorageConfiguration dataStorageCfg = new DataStorageConfiguration();

        DataRegionConfiguration dataRegionCfg = new DataRegionConfiguration();

        dataRegionCfg.setPersistenceEnabled(true);

        dataStorageCfg.setDefaultDataRegionConfiguration(dataRegionCfg);

        cfg.setDataStorageConfiguration(dataStorageCfg);

        cfg.setPeerClassLoadingEnabled(true);

        cfg.setCacheConfiguration(
            cacheAircraftCache(),
            cacheAirportsCache(),
            cacheCrewCache(),
            cacheCustomersCache(),
            cacheFixCache(),
            cacheFleetCache(),
            cacheFlightPlansCache(),
            cacheFlightsCache(),
            cacheFrequentFlyerCache(),
            cacheNavaidCache(),
            cachePilotLogsCache(),
            cacheRouteMetadataCache(),
            cacheRouteSegmentsCache(),
            cacheRunwayCache(),
            cacheTelemetryCache(),
            cacheWindsCache()
        );

        return cfg;
    }

    /**
     * Create configuration for cache "AircraftCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheAircraftCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("AircraftCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeAircraft(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.Aircraft");
        qryEntity.setKeyFieldName("aircraftId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("aircraftId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("aircraftAbbr", "java.lang.String");
        fields.put("aircraftName", "java.lang.String");
        fields.put("landingRollOut", "java.lang.Integer");
        fields.put("manufacturer", "java.lang.String");
        fields.put("maxCruiseSpeed", "java.lang.Integer");
        fields.put("maxRangeSpeed", "java.lang.Integer");
        fields.put("normCruiseSpeed", "java.lang.Integer");
        fields.put("aircraftRange", "java.lang.Integer");
        fields.put("rateOfClimb", "java.lang.Integer");
        fields.put("serviceCeiling", "java.lang.Integer");
        fields.put("stallSpeed", "java.lang.Integer");
        fields.put("takeoffRoll", "java.lang.Integer");
        fields.put("aircraftId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("aircraftId", "aircraft_id");
        aliases.put("aircraftAbbr", "aircraft_abbr");
        aliases.put("aircraftName", "aircraft_name");
        aliases.put("landingRollOut", "landing_roll_out");
        aliases.put("maxCruiseSpeed", "max_cruise_speed");
        aliases.put("maxRangeSpeed", "max_range_speed");
        aliases.put("normCruiseSpeed", "norm_cruise_speed");
        aliases.put("aircraftRange", "aircraft_range");
        aliases.put("rateOfClimb", "rate_of_climb");
        aliases.put("serviceCeiling", "service_ceiling");
        aliases.put("stallSpeed", "stall_speed");
        aliases.put("takeoffRoll", "takeoff_roll");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeAircraft".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeAircraft(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.Aircraft");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("aircraft");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "aircraft_id", int.class, "aircraftId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "aircraft_abbr", String.class, "aircraftAbbr"),
            new JdbcTypeField(Types.VARCHAR, "aircraft_name", String.class, "aircraftName"),
            new JdbcTypeField(Types.INTEGER, "landing_roll_out", Integer.class, "landingRollOut"),
            new JdbcTypeField(Types.VARCHAR, "manufacturer", String.class, "manufacturer"),
            new JdbcTypeField(Types.INTEGER, "max_cruise_speed", Integer.class, "maxCruiseSpeed"),
            new JdbcTypeField(Types.INTEGER, "max_range_speed", Integer.class, "maxRangeSpeed"),
            new JdbcTypeField(Types.INTEGER, "norm_cruise_speed", Integer.class, "normCruiseSpeed"),
            new JdbcTypeField(Types.INTEGER, "aircraft_range", Integer.class, "aircraftRange"),
            new JdbcTypeField(Types.INTEGER, "rate_of_climb", Integer.class, "rateOfClimb"),
            new JdbcTypeField(Types.INTEGER, "service_ceiling", Integer.class, "serviceCeiling"),
            new JdbcTypeField(Types.INTEGER, "stall_speed", Integer.class, "stallSpeed"),
            new JdbcTypeField(Types.INTEGER, "takeoff_roll", Integer.class, "takeoffRoll")
        );

        return type;
    }

    /**
     * Create configuration for cache "AirportsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheAirportsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("AirportsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeAirports(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.Airports");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("recordtypeindicator", "java.lang.String");
        fields.put("sitenumber", "java.lang.String");
        fields.put("facilitytype", "java.lang.String");
        fields.put("locationidentifier", "java.lang.String");
        fields.put("infoeffectivedate", "java.sql.Date");
        fields.put("faaregioncode", "java.lang.String");
        fields.put("faafieldofficecode", "java.lang.String");
        fields.put("stateabbr", "java.lang.String");
        fields.put("statename", "java.lang.String");
        fields.put("county", "java.lang.String");
        fields.put("countystatename", "java.lang.String");
        fields.put("city", "java.lang.String");
        fields.put("facilityname", "java.lang.String");
        fields.put("ownershiptype", "java.lang.String");
        fields.put("facilityuse", "java.lang.String");
        fields.put("ownername", "java.lang.String");
        fields.put("owneraddress", "java.lang.String");
        fields.put("ownercitystatezip", "java.lang.String");
        fields.put("ownerphone", "java.lang.String");
        fields.put("managername", "java.lang.String");
        fields.put("manageraddress", "java.lang.String");
        fields.put("managercitystatezip", "java.lang.String");
        fields.put("managerphone", "java.lang.String");
        fields.put("referencepointlatitudef", "java.lang.String");
        fields.put("referencepointlatitudes", "java.lang.String");
        fields.put("referencepointlongitudef", "java.lang.String");
        fields.put("referencepointlongitudes", "java.lang.String");
        fields.put("referencepointmethod", "java.lang.String");
        fields.put("airportelevation", "java.math.BigDecimal");
        fields.put("airportelevationmethod", "java.lang.String");
        fields.put("magneticvariation", "java.lang.String");
        fields.put("magneticvariationepoch", "java.lang.String");
        fields.put("trafficpatternaltitude", "java.lang.Integer");
        fields.put("sectionalname", "java.lang.String");
        fields.put("distancefromcity", "java.lang.String");
        fields.put("directiontocity", "java.lang.String");
        fields.put("citydistrict", "java.lang.String");
        fields.put("airportacres", "java.lang.String");
        fields.put("artccidentifier", "java.lang.String");
        fields.put("artcccomputeridentifier", "java.lang.String");
        fields.put("artccname", "java.lang.String");
        fields.put("responsibleartccidentifier", "java.lang.String");
        fields.put("responsibleartccname", "java.lang.String");
        fields.put("tieinfssonfield", "java.lang.String");
        fields.put("tieinfssidentifier", "java.lang.String");
        fields.put("tieinfssname", "java.lang.String");
        fields.put("fssphonenumber", "java.lang.String");
        fields.put("fsstollfreephone", "java.lang.String");
        fields.put("alternatefssidentifier", "java.lang.String");
        fields.put("alternatefssname", "java.lang.String");
        fields.put("alternatefsstollfree", "java.lang.String");
        fields.put("notamfacilityidentifier", "java.lang.String");
        fields.put("notamdavailable", "java.lang.String");
        fields.put("airportactivationdate", "java.sql.Date");
        fields.put("airportstatuscode", "java.lang.String");
        fields.put("airportarffcert", "java.lang.String");
        fields.put("agreementcode", "java.lang.String");
        fields.put("airspaceanalysis", "java.lang.String");
        fields.put("international", "java.lang.String");
        fields.put("offfieldcustoms", "java.lang.String");
        fields.put("militaryjointuse", "java.lang.String");
        fields.put("militarylandingrights", "java.lang.String");
        fields.put("inspectionmethod", "java.lang.String");
        fields.put("inspectionagency", "java.lang.String");
        fields.put("lastinspection", "java.sql.Date");
        fields.put("lastinformationrequest", "java.sql.Date");
        fields.put("fueltypes", "java.lang.String");
        fields.put("airframerepair", "java.lang.String");
        fields.put("powerplantrepair", "java.lang.String");
        fields.put("bottledoxygen", "java.lang.String");
        fields.put("bulkoxygen", "java.lang.String");
        fields.put("lightingschedule", "java.lang.String");
        fields.put("beaconlightingschedule", "java.lang.String");
        fields.put("toweronfield", "java.lang.String");
        fields.put("unicomfrequency", "java.lang.String");
        fields.put("ctafrequency", "java.lang.String");
        fields.put("segmentedcircle", "java.lang.String");
        fields.put("beaconcolor", "java.lang.String");
        fields.put("landingfee", "java.lang.String");
        fields.put("medicaluse", "java.lang.String");
        fields.put("singleengine", "java.lang.String");
        fields.put("multiengine", "java.lang.String");
        fields.put("jetengine", "java.lang.String");
        fields.put("helicopter", "java.lang.String");
        fields.put("gliders", "java.lang.String");
        fields.put("military", "java.lang.String");
        fields.put("ultralight", "java.lang.String");
        fields.put("commercialservices", "java.lang.String");
        fields.put("commuterservices", "java.lang.String");
        fields.put("airtaxiservices", "java.lang.String");
        fields.put("generalaviationlocal", "java.lang.String");
        fields.put("generalaviationitinerant", "java.lang.String");
        fields.put("militaryoperations", "java.lang.String");
        fields.put("operationsdataexpires", "java.sql.Date");
        fields.put("positionsource", "java.lang.String");
        fields.put("positionsourcedate", "java.sql.Timestamp");
        fields.put("elevationsource", "java.lang.String");
        fields.put("elevationsourcedate", "java.sql.Timestamp");
        fields.put("contractfuel", "java.lang.String");
        fields.put("transientstorage", "java.lang.String");
        fields.put("otherservices", "java.lang.String");
        fields.put("windsock", "java.lang.String");
        fields.put("icao", "java.lang.String");
        fields.put("latitude", "java.math.BigDecimal");
        fields.put("longitude", "java.math.BigDecimal");
        fields.put("isserviced", "java.lang.Boolean");
        fields.put("id", "java.lang.Integer");

        qryEntity.setFields(fields);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeAirports".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeAirports(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.Airports");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("airports");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", int.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "RecordTypeIndicator", String.class, "recordtypeindicator"),
            new JdbcTypeField(Types.VARCHAR, "SiteNumber", String.class, "sitenumber"),
            new JdbcTypeField(Types.VARCHAR, "FacilityType", String.class, "facilitytype"),
            new JdbcTypeField(Types.VARCHAR, "LocationIdentifier", String.class, "locationidentifier"),
            new JdbcTypeField(Types.DATE, "InfoEffectiveDate", Date.class, "infoeffectivedate"),
            new JdbcTypeField(Types.VARCHAR, "FAARegionCode", String.class, "faaregioncode"),
            new JdbcTypeField(Types.VARCHAR, "FAAFieldOfficeCode", String.class, "faafieldofficecode"),
            new JdbcTypeField(Types.VARCHAR, "StateAbbr", String.class, "stateabbr"),
            new JdbcTypeField(Types.VARCHAR, "StateName", String.class, "statename"),
            new JdbcTypeField(Types.VARCHAR, "County", String.class, "county"),
            new JdbcTypeField(Types.VARCHAR, "CountyStateName", String.class, "countystatename"),
            new JdbcTypeField(Types.VARCHAR, "City", String.class, "city"),
            new JdbcTypeField(Types.VARCHAR, "FacilityName", String.class, "facilityname"),
            new JdbcTypeField(Types.VARCHAR, "OwnershipType", String.class, "ownershiptype"),
            new JdbcTypeField(Types.VARCHAR, "FacilityUse", String.class, "facilityuse"),
            new JdbcTypeField(Types.VARCHAR, "OwnerName", String.class, "ownername"),
            new JdbcTypeField(Types.VARCHAR, "OwnerAddress", String.class, "owneraddress"),
            new JdbcTypeField(Types.VARCHAR, "OwnerCityStateZip", String.class, "ownercitystatezip"),
            new JdbcTypeField(Types.VARCHAR, "OwnerPhone", String.class, "ownerphone"),
            new JdbcTypeField(Types.VARCHAR, "ManagerName", String.class, "managername"),
            new JdbcTypeField(Types.VARCHAR, "ManagerAddress", String.class, "manageraddress"),
            new JdbcTypeField(Types.VARCHAR, "ManagerCityStateZip", String.class, "managercitystatezip"),
            new JdbcTypeField(Types.VARCHAR, "ManagerPhone", String.class, "managerphone"),
            new JdbcTypeField(Types.VARCHAR, "ReferencePointLatitudeF", String.class, "referencepointlatitudef"),
            new JdbcTypeField(Types.VARCHAR, "ReferencePOintLatitudeS", String.class, "referencepointlatitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReferencePOintLongitudeF", String.class, "referencepointlongitudef"),
            new JdbcTypeField(Types.VARCHAR, "ReferencePointLongitudeS", String.class, "referencepointlongitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReferencePointMethod", String.class, "referencepointmethod"),
            new JdbcTypeField(Types.DECIMAL, "AirportElevation", BigDecimal.class, "airportelevation"),
            new JdbcTypeField(Types.VARCHAR, "AirportElevationMethod", String.class, "airportelevationmethod"),
            new JdbcTypeField(Types.VARCHAR, "MagneticVariation", String.class, "magneticvariation"),
            new JdbcTypeField(Types.VARCHAR, "MagneticVariationEpoch", String.class, "magneticvariationepoch"),
            new JdbcTypeField(Types.INTEGER, "TrafficPatternAltitude", Integer.class, "trafficpatternaltitude"),
            new JdbcTypeField(Types.VARCHAR, "SectionalName", String.class, "sectionalname"),
            new JdbcTypeField(Types.VARCHAR, "DistanceFromCity", String.class, "distancefromcity"),
            new JdbcTypeField(Types.VARCHAR, "DirectionToCity", String.class, "directiontocity"),
            new JdbcTypeField(Types.VARCHAR, "CityDistrict", String.class, "citydistrict"),
            new JdbcTypeField(Types.VARCHAR, "AirportAcres", String.class, "airportacres"),
            new JdbcTypeField(Types.VARCHAR, "ArtccIdentifier", String.class, "artccidentifier"),
            new JdbcTypeField(Types.VARCHAR, "ArtccComputerIdentifier", String.class, "artcccomputeridentifier"),
            new JdbcTypeField(Types.VARCHAR, "ArtccName", String.class, "artccname"),
            new JdbcTypeField(Types.VARCHAR, "ResponsibleArtccIdentifier", String.class, "responsibleartccidentifier"),
            new JdbcTypeField(Types.VARCHAR, "ResponsibleArtccName", String.class, "responsibleartccname"),
            new JdbcTypeField(Types.VARCHAR, "TieInFssOnField", String.class, "tieinfssonfield"),
            new JdbcTypeField(Types.VARCHAR, "TieInFssIdentifier", String.class, "tieinfssidentifier"),
            new JdbcTypeField(Types.VARCHAR, "TieInFssName", String.class, "tieinfssname"),
            new JdbcTypeField(Types.VARCHAR, "FssPhoneNumber", String.class, "fssphonenumber"),
            new JdbcTypeField(Types.VARCHAR, "FssTollFreePhone", String.class, "fsstollfreephone"),
            new JdbcTypeField(Types.VARCHAR, "AlternateFssIdentifier", String.class, "alternatefssidentifier"),
            new JdbcTypeField(Types.VARCHAR, "AlternateFssName", String.class, "alternatefssname"),
            new JdbcTypeField(Types.VARCHAR, "AlternateFssTollFree", String.class, "alternatefsstollfree"),
            new JdbcTypeField(Types.VARCHAR, "NotamFacilityIdentifier", String.class, "notamfacilityidentifier"),
            new JdbcTypeField(Types.VARCHAR, "NotamDAvailable", String.class, "notamdavailable"),
            new JdbcTypeField(Types.DATE, "AirportActivationDate", Date.class, "airportactivationdate"),
            new JdbcTypeField(Types.VARCHAR, "AirportStatusCode", String.class, "airportstatuscode"),
            new JdbcTypeField(Types.VARCHAR, "AirportArffCert", String.class, "airportarffcert"),
            new JdbcTypeField(Types.VARCHAR, "AgreementCode", String.class, "agreementcode"),
            new JdbcTypeField(Types.VARCHAR, "AirspaceAnalysis", String.class, "airspaceanalysis"),
            new JdbcTypeField(Types.VARCHAR, "International", String.class, "international"),
            new JdbcTypeField(Types.VARCHAR, "OffFieldCustoms", String.class, "offfieldcustoms"),
            new JdbcTypeField(Types.VARCHAR, "MilitaryJointUse", String.class, "militaryjointuse"),
            new JdbcTypeField(Types.VARCHAR, "MilitaryLandingRights", String.class, "militarylandingrights"),
            new JdbcTypeField(Types.VARCHAR, "InspectionMethod", String.class, "inspectionmethod"),
            new JdbcTypeField(Types.VARCHAR, "InspectionAgency", String.class, "inspectionagency"),
            new JdbcTypeField(Types.DATE, "LastInspection", Date.class, "lastinspection"),
            new JdbcTypeField(Types.DATE, "LastInformationRequest", Date.class, "lastinformationrequest"),
            new JdbcTypeField(Types.VARCHAR, "FuelTypes", String.class, "fueltypes"),
            new JdbcTypeField(Types.VARCHAR, "AirframeRepair", String.class, "airframerepair"),
            new JdbcTypeField(Types.VARCHAR, "PowerPlantRepair", String.class, "powerplantrepair"),
            new JdbcTypeField(Types.VARCHAR, "BottledOxygen", String.class, "bottledoxygen"),
            new JdbcTypeField(Types.VARCHAR, "BulkOxygen", String.class, "bulkoxygen"),
            new JdbcTypeField(Types.VARCHAR, "LightingSchedule", String.class, "lightingschedule"),
            new JdbcTypeField(Types.VARCHAR, "BeaconLightingSchedule", String.class, "beaconlightingschedule"),
            new JdbcTypeField(Types.VARCHAR, "TowerOnField", String.class, "toweronfield"),
            new JdbcTypeField(Types.VARCHAR, "UnicomFrequency", String.class, "unicomfrequency"),
            new JdbcTypeField(Types.VARCHAR, "CTAFrequency", String.class, "ctafrequency"),
            new JdbcTypeField(Types.VARCHAR, "SegmentedCircle", String.class, "segmentedcircle"),
            new JdbcTypeField(Types.VARCHAR, "BeaconColor", String.class, "beaconcolor"),
            new JdbcTypeField(Types.VARCHAR, "LandingFee", String.class, "landingfee"),
            new JdbcTypeField(Types.VARCHAR, "MedicalUse", String.class, "medicaluse"),
            new JdbcTypeField(Types.VARCHAR, "SingleEngine", String.class, "singleengine"),
            new JdbcTypeField(Types.VARCHAR, "MultiEngine", String.class, "multiengine"),
            new JdbcTypeField(Types.VARCHAR, "JetEngine", String.class, "jetengine"),
            new JdbcTypeField(Types.VARCHAR, "Helicopter", String.class, "helicopter"),
            new JdbcTypeField(Types.VARCHAR, "Gliders", String.class, "gliders"),
            new JdbcTypeField(Types.VARCHAR, "Military", String.class, "military"),
            new JdbcTypeField(Types.VARCHAR, "Ultralight", String.class, "ultralight"),
            new JdbcTypeField(Types.VARCHAR, "CommercialServices", String.class, "commercialservices"),
            new JdbcTypeField(Types.VARCHAR, "CommuterServices", String.class, "commuterservices"),
            new JdbcTypeField(Types.VARCHAR, "AirTaxiServices", String.class, "airtaxiservices"),
            new JdbcTypeField(Types.VARCHAR, "GeneralAviationLocal", String.class, "generalaviationlocal"),
            new JdbcTypeField(Types.VARCHAR, "GeneralAviationItinerant", String.class, "generalaviationitinerant"),
            new JdbcTypeField(Types.VARCHAR, "MilitaryOperations", String.class, "militaryoperations"),
            new JdbcTypeField(Types.DATE, "OperationsDataExpires", Date.class, "operationsdataexpires"),
            new JdbcTypeField(Types.VARCHAR, "PositionSource", String.class, "positionsource"),
            new JdbcTypeField(Types.TIMESTAMP, "PositionSourceDate", Timestamp.class, "positionsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ElevationSource", String.class, "elevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ElevationSourceDate", Timestamp.class, "elevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ContractFuel", String.class, "contractfuel"),
            new JdbcTypeField(Types.VARCHAR, "TransientStorage", String.class, "transientstorage"),
            new JdbcTypeField(Types.VARCHAR, "OtherServices", String.class, "otherservices"),
            new JdbcTypeField(Types.VARCHAR, "WindSock", String.class, "windsock"),
            new JdbcTypeField(Types.VARCHAR, "ICAO", String.class, "icao"),
            new JdbcTypeField(Types.DECIMAL, "Latitude", BigDecimal.class, "latitude"),
            new JdbcTypeField(Types.DECIMAL, "Longitude", BigDecimal.class, "longitude"),
            new JdbcTypeField(Types.BIT, "IsServiced", Boolean.class, "isserviced")
        );

        return type;
    }

    /**
     * Create configuration for cache "CrewCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheCrewCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CrewCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeCrew(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.Crew");
        qryEntity.setKeyFieldName("crewId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("crewId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("crewType", "java.lang.String");
        fields.put("firstName", "java.lang.String");
        fields.put("lastName", "java.lang.String");
        fields.put("employeeId", "java.lang.String");
        fields.put("hireDate", "java.sql.Date");
        fields.put("crewId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("crewId", "crew_id");
        aliases.put("crewType", "crew_type");
        aliases.put("firstName", "first_name");
        aliases.put("lastName", "last_name");
        aliases.put("employeeId", "employee_id");
        aliases.put("hireDate", "hire_date");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeCrew".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeCrew(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.Crew");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("crew");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "crew_id", String.class, "crewId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "crew_type", String.class, "crewType"),
            new JdbcTypeField(Types.VARCHAR, "first_name", String.class, "firstName"),
            new JdbcTypeField(Types.VARCHAR, "last_name", String.class, "lastName"),
            new JdbcTypeField(Types.VARCHAR, "employee_id", String.class, "employeeId"),
            new JdbcTypeField(Types.DATE, "hire_date", Date.class, "hireDate")
        );

        return type;
    }

    /**
     * Create configuration for cache "CustomersCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheCustomersCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CustomersCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeCustomers(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.Customers");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("firstName", "java.lang.String");
        fields.put("lastName", "java.lang.String");
        fields.put("emailAddress", "java.lang.String");
        fields.put("address1", "java.lang.String");
        fields.put("address2", "java.lang.String");
        fields.put("city", "java.lang.String");
        fields.put("state", "java.lang.String");
        fields.put("zip", "java.lang.String");
        fields.put("id", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("firstName", "first_name");
        aliases.put("lastName", "last_name");
        aliases.put("emailAddress", "email_address");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeCustomers".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeCustomers(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.Customers");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("customers");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "id", String.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "first_name", String.class, "firstName"),
            new JdbcTypeField(Types.VARCHAR, "last_name", String.class, "lastName"),
            new JdbcTypeField(Types.VARCHAR, "email_address", String.class, "emailAddress"),
            new JdbcTypeField(Types.VARCHAR, "address1", String.class, "address1"),
            new JdbcTypeField(Types.VARCHAR, "address2", String.class, "address2"),
            new JdbcTypeField(Types.VARCHAR, "city", String.class, "city"),
            new JdbcTypeField(Types.VARCHAR, "state", String.class, "state"),
            new JdbcTypeField(Types.VARCHAR, "zip", String.class, "zip")
        );

        return type;
    }

    /**
     * Create configuration for cache "FixCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheFixCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("FixCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeFix(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.Fix");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("recordtype", "java.lang.String");
        fields.put("fixident", "java.lang.String");
        fields.put("fixstatename", "java.lang.String");
        fields.put("icaoregioncode", "java.lang.String");
        fields.put("fixlatitude", "java.lang.String");
        fields.put("fixlongitude", "java.lang.String");
        fields.put("civilormilfix", "java.lang.String");
        fields.put("mlscomponentdata", "java.lang.String");
        fields.put("fixdescription", "java.lang.String");
        fields.put("previousfixname", "java.lang.String");
        fields.put("chart", "java.lang.String");
        fields.put("published", "java.lang.String");
        fields.put("fixuse", "java.lang.String");
        fields.put("nasident", "java.lang.String");
        fields.put("artcchigh", "java.lang.String");
        fields.put("artcclow", "java.lang.String");
        fields.put("fixcountry", "java.lang.String");
        fields.put("pitch", "java.lang.String");
        fields.put("fieldCatch", "java.lang.String");
        fields.put("suaatcaa", "java.lang.String");
        fields.put("blank", "java.lang.String");
        fields.put("id", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("fieldCatch", "Catch");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeFix".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeFix(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.Fix");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("fix");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", int.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "RecordType", String.class, "recordtype"),
            new JdbcTypeField(Types.VARCHAR, "FixIdent", String.class, "fixident"),
            new JdbcTypeField(Types.VARCHAR, "FixStateName", String.class, "fixstatename"),
            new JdbcTypeField(Types.VARCHAR, "IcaoRegionCode", String.class, "icaoregioncode"),
            new JdbcTypeField(Types.VARCHAR, "FixLatitude", String.class, "fixlatitude"),
            new JdbcTypeField(Types.VARCHAR, "FixLongitude", String.class, "fixlongitude"),
            new JdbcTypeField(Types.VARCHAR, "CivilOrMilFix", String.class, "civilormilfix"),
            new JdbcTypeField(Types.VARCHAR, "MlsComponentData", String.class, "mlscomponentdata"),
            new JdbcTypeField(Types.VARCHAR, "FixDescription", String.class, "fixdescription"),
            new JdbcTypeField(Types.VARCHAR, "PreviousFixName", String.class, "previousfixname"),
            new JdbcTypeField(Types.VARCHAR, "Chart", String.class, "chart"),
            new JdbcTypeField(Types.VARCHAR, "Published", String.class, "published"),
            new JdbcTypeField(Types.VARCHAR, "FixUse", String.class, "fixuse"),
            new JdbcTypeField(Types.VARCHAR, "NasIdent", String.class, "nasident"),
            new JdbcTypeField(Types.VARCHAR, "ArtccHigh", String.class, "artcchigh"),
            new JdbcTypeField(Types.VARCHAR, "ArtccLow", String.class, "artcclow"),
            new JdbcTypeField(Types.VARCHAR, "FixCountry", String.class, "fixcountry"),
            new JdbcTypeField(Types.VARCHAR, "Pitch", String.class, "pitch"),
            new JdbcTypeField(Types.VARCHAR, "Catch", String.class, "fieldCatch"),
            new JdbcTypeField(Types.VARCHAR, "SuaAtcaa", String.class, "suaatcaa"),
            new JdbcTypeField(Types.VARCHAR, "Blank", String.class, "blank")
        );

        return type;
    }

    /**
     * Create configuration for cache "FleetCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheFleetCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("FleetCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeFleet(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.Fleet");
        qryEntity.setKeyFieldName("fleetId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("fleetId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("aircraftId", "java.lang.Integer");
        fields.put("airframeHours", "java.lang.Integer");
        fields.put("tailNumber", "java.lang.String");
        fields.put("capacity", "java.lang.String");
        fields.put("fleetId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("fleetId", "fleet_id");
        aliases.put("aircraftId", "aircraft_id");
        aliases.put("airframeHours", "airframe_hours");
        aliases.put("tailNumber", "tail_number");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeFleet".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeFleet(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.Fleet");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("fleet");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "fleet_id", String.class, "fleetId"));

        type.setValueFields(
            new JdbcTypeField(Types.INTEGER, "aircraft_id", Integer.class, "aircraftId"),
            new JdbcTypeField(Types.INTEGER, "airframe_hours", Integer.class, "airframeHours"),
            new JdbcTypeField(Types.VARCHAR, "tail_number", String.class, "tailNumber"),
            new JdbcTypeField(Types.VARCHAR, "capacity", String.class, "capacity")
        );

        return type;
    }

    /**
     * Create configuration for cache "FlightPlansCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheFlightPlansCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("FlightPlansCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeFlightPlans(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.FlightPlans");
        qryEntity.setTableName("flight_plans");
        qryEntity.setKeyFieldName("flightPlanId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("flightPlanId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("flightNumber", "java.lang.String");
        fields.put("fromAirportIcao", "java.lang.String");
        fields.put("toAirportIcao", "java.lang.String");
        fields.put("distance", "java.lang.String");
        fields.put("filedAltitude", "java.lang.String");
        fields.put("filedAirspeed", "java.lang.String");
        fields.put("fleetId", "java.lang.String");
        fields.put("estimatedMinutesEnroute", "java.lang.Integer");
        fields.put("timeAway", "java.lang.String");
        fields.put("flightStatus", "java.lang.String");
        fields.put("flightPlanId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("flightPlanId", "flight_plan_id");
        aliases.put("flightNumber", "flight_number");
        aliases.put("fromAirportIcao", "from_airport_icao");
        aliases.put("toAirportIcao", "to_airport_icao");
        aliases.put("filedAltitude", "filed_altitude");
        aliases.put("filedAirspeed", "filed_airspeed");
        aliases.put("fleetId", "fleet_id");
        aliases.put("estimatedMinutesEnroute", "estimated_minutes_enroute");
        aliases.put("timeAway", "time_away");
        aliases.put("flightStatus", "flight_status");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeFlightPlans".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeFlightPlans(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.FlightPlans");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("flight_plans");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "flight_plan_id", String.class, "flightPlanId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "flight_number", String.class, "flightNumber"),
            new JdbcTypeField(Types.VARCHAR, "from_airport_icao", String.class, "fromAirportIcao"),
            new JdbcTypeField(Types.VARCHAR, "to_airport_icao", String.class, "toAirportIcao"),
            new JdbcTypeField(Types.VARCHAR, "distance", String.class, "distance"),
            new JdbcTypeField(Types.VARCHAR, "filed_altitude", String.class, "filedAltitude"),
            new JdbcTypeField(Types.VARCHAR, "filed_airspeed", String.class, "filedAirspeed"),
            new JdbcTypeField(Types.VARCHAR, "fleet_id", String.class, "fleetId"),
            new JdbcTypeField(Types.INTEGER, "estimated_minutes_enroute", Integer.class, "estimatedMinutesEnroute"),
            new JdbcTypeField(Types.VARCHAR, "time_away", String.class, "timeAway"),
            new JdbcTypeField(Types.VARCHAR, "flight_status", String.class, "flightStatus")
        );

        return type;
    }

    /**
     * Create configuration for cache "FlightsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheFlightsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("FlightsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeFlights(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.Flights");
        qryEntity.setKeyFieldName("flightId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("flightId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("flightPlanId", "java.lang.String");
        fields.put("fleetId", "java.lang.String");
        fields.put("distance", "java.lang.String");
        fields.put("estimatedTimeEnroute", "java.math.BigDecimal");
        fields.put("flightCapacity", "java.lang.Integer");
        fields.put("passengerCount", "java.lang.Integer");
        fields.put("flightNumber", "java.lang.Integer");
        fields.put("departureDate", "java.sql.Date");
        fields.put("departureTime", "java.sql.Time");
        fields.put("arrivalTime", "java.sql.Time");
        fields.put("departureAirport", "java.lang.String");
        fields.put("arrivalAirport", "java.lang.String");
        fields.put("pilotId", "java.lang.String");
        fields.put("copilotId", "java.lang.String");
        fields.put("flightId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("flightId", "flight_id");
        aliases.put("flightPlanId", "flight_plan_id");
        aliases.put("fleetId", "fleet_id");
        aliases.put("estimatedTimeEnroute", "estimated_time_enroute");
        aliases.put("flightCapacity", "flight_capacity");
        aliases.put("passengerCount", "passenger_count");
        aliases.put("flightNumber", "flight_number");
        aliases.put("departureDate", "departure_date");
        aliases.put("departureTime", "departure_time");
        aliases.put("arrivalTime", "arrival_time");
        aliases.put("departureAirport", "departure_airport");
        aliases.put("arrivalAirport", "arrival_airport");
        aliases.put("pilotId", "pilot_id");
        aliases.put("copilotId", "copilot_id");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeFlights".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeFlights(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.Flights");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("flights");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "flight_id", String.class, "flightId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "flight_plan_id", String.class, "flightPlanId"),
            new JdbcTypeField(Types.VARCHAR, "fleet_id", String.class, "fleetId"),
            new JdbcTypeField(Types.VARCHAR, "distance", String.class, "distance"),
            new JdbcTypeField(Types.DECIMAL, "estimated_time_enroute", BigDecimal.class, "estimatedTimeEnroute"),
            new JdbcTypeField(Types.INTEGER, "flight_capacity", Integer.class, "flightCapacity"),
            new JdbcTypeField(Types.INTEGER, "passenger_count", Integer.class, "passengerCount"),
            new JdbcTypeField(Types.INTEGER, "flight_number", Integer.class, "flightNumber"),
            new JdbcTypeField(Types.DATE, "departure_date", Date.class, "departureDate"),
            new JdbcTypeField(Types.TIME, "departure_time", Time.class, "departureTime"),
            new JdbcTypeField(Types.TIME, "arrival_time", Time.class, "arrivalTime"),
            new JdbcTypeField(Types.VARCHAR, "departure_airport", String.class, "departureAirport"),
            new JdbcTypeField(Types.VARCHAR, "arrival_airport", String.class, "arrivalAirport"),
            new JdbcTypeField(Types.VARCHAR, "pilot_id", String.class, "pilotId"),
            new JdbcTypeField(Types.VARCHAR, "copilot_id", String.class, "copilotId")
        );

        return type;
    }

    /**
     * Create configuration for cache "FrequentFlyerCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheFrequentFlyerCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("FrequentFlyerCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeFrequentFlyer(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.FrequentFlyer");
        qryEntity.setTableName("frequent_flyer");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("customerId", "java.lang.String");
        fields.put("account", "java.lang.String");
        fields.put("memberSince", "java.sql.Date");
        fields.put("total", "java.lang.Integer");
        fields.put("used", "java.lang.Integer");
        fields.put("balance", "java.lang.String");
        fields.put("level", "java.lang.String");
        fields.put("id", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("customerId", "customer_id");
        aliases.put("memberSince", "member_since");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeFrequentFlyer".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeFrequentFlyer(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.FrequentFlyer");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("frequent_flyer");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "id", String.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "customer_id", String.class, "customerId"),
            new JdbcTypeField(Types.VARCHAR, "account", String.class, "account"),
            new JdbcTypeField(Types.DATE, "member_since", Date.class, "memberSince"),
            new JdbcTypeField(Types.INTEGER, "total", Integer.class, "total"),
            new JdbcTypeField(Types.INTEGER, "used", Integer.class, "used"),
            new JdbcTypeField(Types.VARCHAR, "balance", String.class, "balance"),
            new JdbcTypeField(Types.VARCHAR, "level", String.class, "level")
        );

        return type;
    }

    /**
     * Create configuration for cache "NavaidCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheNavaidCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("NavaidCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeNavaid(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.Navaid");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("recordtype", "java.lang.String");
        fields.put("facilityident", "java.lang.String");
        fields.put("facilitytype", "java.lang.String");
        fields.put("navaidident", "java.lang.String");
        fields.put("effectivedate", "java.sql.Date");
        fields.put("navaidname", "java.lang.String");
        fields.put("city", "java.lang.String");
        fields.put("state", "java.lang.String");
        fields.put("stateabbr", "java.lang.String");
        fields.put("faaregion", "java.lang.String");
        fields.put("country", "java.lang.String");
        fields.put("countryabbr", "java.lang.String");
        fields.put("ownername", "java.lang.String");
        fields.put("operatorname", "java.lang.String");
        fields.put("commonusage", "java.lang.String");
        fields.put("publicuse", "java.lang.String");
        fields.put("operationalhours", "java.lang.String");
        fields.put("identhigh", "java.lang.String");
        fields.put("artcchigh", "java.lang.String");
        fields.put("identlow", "java.lang.String");
        fields.put("artcclow", "java.lang.String");
        fields.put("latitude", "java.lang.String");
        fields.put("latitudes", "java.lang.String");
        fields.put("longitude", "java.lang.String");
        fields.put("longitudes", "java.lang.String");
        fields.put("latlongaccuracy", "java.lang.String");
        fields.put("tacanlatitude", "java.lang.String");
        fields.put("tacanlatitudes", "java.lang.String");
        fields.put("tacanlongitude", "java.lang.String");
        fields.put("tacanlongitudes", "java.lang.String");
        fields.put("elevation", "java.lang.String");
        fields.put("magneticvariation", "java.lang.String");
        fields.put("magneticvariationepoch", "java.lang.String");
        fields.put("voice", "java.lang.String");
        fields.put("poweroutput", "java.lang.String");
        fields.put("voiceident", "java.lang.String");
        fields.put("monitoringcategory", "java.lang.String");
        fields.put("radiocallname", "java.lang.String");
        fields.put("tacanchannel", "java.lang.String");
        fields.put("frequency", "java.lang.String");
        fields.put("morsecodeident", "java.lang.String");
        fields.put("fanmarkertype", "java.lang.String");
        fields.put("truebearing", "java.lang.String");
        fields.put("protectedfreqaltitude", "java.lang.String");
        fields.put("highalthaslowradio", "java.lang.String");
        fields.put("navaidzmarker", "java.lang.String");
        fields.put("weatherbroadcasthours", "java.lang.String");
        fields.put("weatherbroadcastphone", "java.lang.String");
        fields.put("controllingfssident", "java.lang.String");
        fields.put("controllingfssname", "java.lang.String");
        fields.put("fsshours", "java.lang.String");
        fields.put("notamaccountabilitycode", "java.lang.String");
        fields.put("quadidentandrangelegbearing", "java.lang.String");
        fields.put("status", "java.lang.String");
        fields.put("pitch", "java.lang.String");
        fields.put("fieldCatch", "java.lang.String");
        fields.put("suaatcaa", "java.lang.String");
        fields.put("restriction", "java.lang.String");
        fields.put("hiwas", "java.lang.String");
        fields.put("twebrestriction", "java.lang.String");
        fields.put("longituded", "java.math.BigDecimal");
        fields.put("latituded", "java.math.BigDecimal");
        fields.put("id", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("fieldCatch", "Catch");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeNavaid".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeNavaid(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.Navaid");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("navaid");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", int.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "RecordType", String.class, "recordtype"),
            new JdbcTypeField(Types.VARCHAR, "FacilityIdent", String.class, "facilityident"),
            new JdbcTypeField(Types.VARCHAR, "FacilityType", String.class, "facilitytype"),
            new JdbcTypeField(Types.VARCHAR, "NavaidIdent", String.class, "navaidident"),
            new JdbcTypeField(Types.DATE, "EffectiveDate", Date.class, "effectivedate"),
            new JdbcTypeField(Types.VARCHAR, "NavaidName", String.class, "navaidname"),
            new JdbcTypeField(Types.VARCHAR, "City", String.class, "city"),
            new JdbcTypeField(Types.VARCHAR, "State", String.class, "state"),
            new JdbcTypeField(Types.VARCHAR, "StateAbbr", String.class, "stateabbr"),
            new JdbcTypeField(Types.VARCHAR, "FaaRegion", String.class, "faaregion"),
            new JdbcTypeField(Types.VARCHAR, "Country", String.class, "country"),
            new JdbcTypeField(Types.VARCHAR, "CountryAbbr", String.class, "countryabbr"),
            new JdbcTypeField(Types.VARCHAR, "OwnerName", String.class, "ownername"),
            new JdbcTypeField(Types.VARCHAR, "Operatorname", String.class, "operatorname"),
            new JdbcTypeField(Types.VARCHAR, "CommonUsage", String.class, "commonusage"),
            new JdbcTypeField(Types.VARCHAR, "PublicUse", String.class, "publicuse"),
            new JdbcTypeField(Types.VARCHAR, "OperationalHours", String.class, "operationalhours"),
            new JdbcTypeField(Types.VARCHAR, "IdentHigh", String.class, "identhigh"),
            new JdbcTypeField(Types.VARCHAR, "ArtccHigh", String.class, "artcchigh"),
            new JdbcTypeField(Types.VARCHAR, "IdentLow", String.class, "identlow"),
            new JdbcTypeField(Types.VARCHAR, "ArtccLow", String.class, "artcclow"),
            new JdbcTypeField(Types.VARCHAR, "Latitude", String.class, "latitude"),
            new JdbcTypeField(Types.VARCHAR, "LatitudeS", String.class, "latitudes"),
            new JdbcTypeField(Types.VARCHAR, "Longitude", String.class, "longitude"),
            new JdbcTypeField(Types.VARCHAR, "LongitudeS", String.class, "longitudes"),
            new JdbcTypeField(Types.VARCHAR, "LatLongAccuracy", String.class, "latlongaccuracy"),
            new JdbcTypeField(Types.VARCHAR, "TacanLatitude", String.class, "tacanlatitude"),
            new JdbcTypeField(Types.VARCHAR, "TacanLatitudeS", String.class, "tacanlatitudes"),
            new JdbcTypeField(Types.VARCHAR, "TacanLongitude", String.class, "tacanlongitude"),
            new JdbcTypeField(Types.VARCHAR, "TacanLongitudeS", String.class, "tacanlongitudes"),
            new JdbcTypeField(Types.VARCHAR, "Elevation", String.class, "elevation"),
            new JdbcTypeField(Types.VARCHAR, "MagneticVariation", String.class, "magneticvariation"),
            new JdbcTypeField(Types.VARCHAR, "MagneticVariationEpoch", String.class, "magneticvariationepoch"),
            new JdbcTypeField(Types.VARCHAR, "Voice", String.class, "voice"),
            new JdbcTypeField(Types.VARCHAR, "PowerOutput", String.class, "poweroutput"),
            new JdbcTypeField(Types.VARCHAR, "VoiceIdent", String.class, "voiceident"),
            new JdbcTypeField(Types.VARCHAR, "MonitoringCategory", String.class, "monitoringcategory"),
            new JdbcTypeField(Types.VARCHAR, "RadioCallname", String.class, "radiocallname"),
            new JdbcTypeField(Types.VARCHAR, "TacanChannel", String.class, "tacanchannel"),
            new JdbcTypeField(Types.VARCHAR, "Frequency", String.class, "frequency"),
            new JdbcTypeField(Types.VARCHAR, "MorseCodeIdent", String.class, "morsecodeident"),
            new JdbcTypeField(Types.VARCHAR, "FanMarkerType", String.class, "fanmarkertype"),
            new JdbcTypeField(Types.VARCHAR, "TrueBearing", String.class, "truebearing"),
            new JdbcTypeField(Types.VARCHAR, "ProtectedFreqAltitude", String.class, "protectedfreqaltitude"),
            new JdbcTypeField(Types.VARCHAR, "HighAltHasLowRadio", String.class, "highalthaslowradio"),
            new JdbcTypeField(Types.VARCHAR, "NavaidZMarker", String.class, "navaidzmarker"),
            new JdbcTypeField(Types.VARCHAR, "WeatherBroadcastHours", String.class, "weatherbroadcasthours"),
            new JdbcTypeField(Types.VARCHAR, "WeatherBroadcastPhone", String.class, "weatherbroadcastphone"),
            new JdbcTypeField(Types.VARCHAR, "ControllingFSSIdent", String.class, "controllingfssident"),
            new JdbcTypeField(Types.VARCHAR, "ControllingFssName", String.class, "controllingfssname"),
            new JdbcTypeField(Types.VARCHAR, "FssHours", String.class, "fsshours"),
            new JdbcTypeField(Types.VARCHAR, "NotamAccountabilityCode", String.class, "notamaccountabilitycode"),
            new JdbcTypeField(Types.VARCHAR, "QuadIdentAndRangeLegBearing", String.class, "quadidentandrangelegbearing"),
            new JdbcTypeField(Types.VARCHAR, "Status", String.class, "status"),
            new JdbcTypeField(Types.VARCHAR, "Pitch", String.class, "pitch"),
            new JdbcTypeField(Types.VARCHAR, "Catch", String.class, "fieldCatch"),
            new JdbcTypeField(Types.VARCHAR, "SuaAtcaa", String.class, "suaatcaa"),
            new JdbcTypeField(Types.VARCHAR, "Restriction", String.class, "restriction"),
            new JdbcTypeField(Types.VARCHAR, "Hiwas", String.class, "hiwas"),
            new JdbcTypeField(Types.VARCHAR, "TwebRestriction", String.class, "twebrestriction"),
            new JdbcTypeField(Types.DECIMAL, "LongitudeD", BigDecimal.class, "longituded"),
            new JdbcTypeField(Types.DECIMAL, "LatitudeD", BigDecimal.class, "latituded")
        );

        return type;
    }

    /**
     * Create configuration for cache "PilotLogsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cachePilotLogsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("PilotLogsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypePilotLogs(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.PilotLogs");
        qryEntity.setTableName("pilot_logs");
        qryEntity.setKeyFieldName("logId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("logId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("crewId", "java.lang.String");
        fields.put("fleetId", "java.lang.String");
        fields.put("flightDate", "java.sql.Date");
        fields.put("origin", "java.lang.String");
        fields.put("destination", "java.lang.String");
        fields.put("duration", "java.lang.String");
        fields.put("landingsDay", "java.lang.String");
        fields.put("landingsNight", "java.math.BigDecimal");
        fields.put("hoursDay", "java.math.BigDecimal");
        fields.put("hoursNight", "java.math.BigDecimal");
        fields.put("actualInstrument", "java.math.BigDecimal");
        fields.put("approachCount", "java.lang.String");
        fields.put("approachType", "java.lang.String");
        fields.put("simulatorHours", "java.lang.Integer");
        fields.put("crossCountryHours", "java.math.BigDecimal");
        fields.put("solo", "java.lang.Integer");
        fields.put("pilotInCommandHours", "java.math.BigDecimal");
        fields.put("secondInCommandHours", "java.math.BigDecimal");
        fields.put("remarks", "java.lang.String");
        fields.put("logId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("logId", "log_id");
        aliases.put("crewId", "crew_id");
        aliases.put("fleetId", "fleet_id");
        aliases.put("flightDate", "flight_date");
        aliases.put("landingsDay", "landings_day");
        aliases.put("landingsNight", "landings_night");
        aliases.put("hoursDay", "hours_day");
        aliases.put("hoursNight", "hours_night");
        aliases.put("actualInstrument", "actual_instrument");
        aliases.put("approachCount", "approach_count");
        aliases.put("approachType", "approach_type");
        aliases.put("simulatorHours", "simulator_hours");
        aliases.put("crossCountryHours", "cross_country_hours");
        aliases.put("pilotInCommandHours", "pilot_in_command_hours");
        aliases.put("secondInCommandHours", "second_in_command_hours");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypePilotLogs".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypePilotLogs(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.PilotLogs");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("pilot_logs");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "log_id", String.class, "logId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "crew_id", String.class, "crewId"),
            new JdbcTypeField(Types.VARCHAR, "fleet_id", String.class, "fleetId"),
            new JdbcTypeField(Types.DATE, "flight_date", Date.class, "flightDate"),
            new JdbcTypeField(Types.VARCHAR, "origin", String.class, "origin"),
            new JdbcTypeField(Types.VARCHAR, "destination", String.class, "destination"),
            new JdbcTypeField(Types.VARCHAR, "duration", String.class, "duration"),
            new JdbcTypeField(Types.VARCHAR, "landings_day", String.class, "landingsDay"),
            new JdbcTypeField(Types.DECIMAL, "landings_night", BigDecimal.class, "landingsNight"),
            new JdbcTypeField(Types.DECIMAL, "hours_day", BigDecimal.class, "hoursDay"),
            new JdbcTypeField(Types.DECIMAL, "hours_night", BigDecimal.class, "hoursNight"),
            new JdbcTypeField(Types.DECIMAL, "actual_instrument", BigDecimal.class, "actualInstrument"),
            new JdbcTypeField(Types.VARCHAR, "approach_count", String.class, "approachCount"),
            new JdbcTypeField(Types.VARCHAR, "approach_type", String.class, "approachType"),
            new JdbcTypeField(Types.INTEGER, "simulator_hours", Integer.class, "simulatorHours"),
            new JdbcTypeField(Types.DECIMAL, "cross_country_hours", BigDecimal.class, "crossCountryHours"),
            new JdbcTypeField(Types.INTEGER, "solo", Integer.class, "solo"),
            new JdbcTypeField(Types.DECIMAL, "pilot_in_command_hours", BigDecimal.class, "pilotInCommandHours"),
            new JdbcTypeField(Types.DECIMAL, "second_in_command_hours", BigDecimal.class, "secondInCommandHours"),
            new JdbcTypeField(Types.VARCHAR, "remarks", String.class, "remarks")
        );

        return type;
    }

    /**
     * Create configuration for cache "RouteMetadataCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheRouteMetadataCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("RouteMetadataCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeRouteMetadata(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.RouteMetadata");
        qryEntity.setTableName("route_metadata");
        qryEntity.setKeyFieldName("routeMetadataId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("routeMetadataId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("routeId", "java.lang.String");
        fields.put("fromIcao", "java.lang.String");
        fields.put("toIcao", "java.lang.String");
        fields.put("fromName", "java.lang.String");
        fields.put("toName", "java.lang.String");
        fields.put("distance", "java.lang.Integer");
        fields.put("waypoints", "java.lang.Integer");
        fields.put("routeMetadataId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("routeMetadataId", "route_metadata_id");
        aliases.put("routeId", "route_id");
        aliases.put("fromIcao", "from_icao");
        aliases.put("toIcao", "to_icao");
        aliases.put("fromName", "from_name");
        aliases.put("toName", "to_name");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeRouteMetadata".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeRouteMetadata(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.RouteMetadata");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("route_metadata");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "route_metadata_id", int.class, "routeMetadataId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "route_id", String.class, "routeId"),
            new JdbcTypeField(Types.CHAR, "from_icao", String.class, "fromIcao"),
            new JdbcTypeField(Types.CHAR, "to_icao", String.class, "toIcao"),
            new JdbcTypeField(Types.VARCHAR, "from_name", String.class, "fromName"),
            new JdbcTypeField(Types.VARCHAR, "to_name", String.class, "toName"),
            new JdbcTypeField(Types.INTEGER, "distance", Integer.class, "distance"),
            new JdbcTypeField(Types.INTEGER, "waypoints", int.class, "waypoints")
        );

        return type;
    }

    /**
     * Create configuration for cache "RouteSegmentsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheRouteSegmentsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("RouteSegmentsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeRouteSegments(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.RouteSegments");
        qryEntity.setTableName("route_segments");
        qryEntity.setKeyFieldName("rowId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("rowId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("routeId", "java.lang.String");
        fields.put("sequence", "java.lang.Integer");
        fields.put("waypointKind", "java.lang.String");
        fields.put("waypointIdent", "java.lang.String");
        fields.put("waypointName", "java.lang.String");
        fields.put("latitude", "java.math.BigDecimal");
        fields.put("longitude", "java.math.BigDecimal");
        fields.put("viaAirway", "java.lang.String");
        fields.put("airwayIdent", "java.lang.String");
        fields.put("bearingToNext", "java.lang.Integer");
        fields.put("distanceToNext", "java.lang.Integer");
        fields.put("rowId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("rowId", "row_id");
        aliases.put("routeId", "route_id");
        aliases.put("waypointKind", "waypoint_kind");
        aliases.put("waypointIdent", "waypoint_ident");
        aliases.put("waypointName", "waypoint_name");
        aliases.put("viaAirway", "via_airway");
        aliases.put("airwayIdent", "airway_ident");
        aliases.put("bearingToNext", "bearing_to_next");
        aliases.put("distanceToNext", "distance_to_next");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeRouteSegments".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeRouteSegments(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.RouteSegments");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("route_segments");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "row_id", int.class, "rowId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "route_id", String.class, "routeId"),
            new JdbcTypeField(Types.INTEGER, "sequence", int.class, "sequence"),
            new JdbcTypeField(Types.VARCHAR, "waypoint_kind", String.class, "waypointKind"),
            new JdbcTypeField(Types.VARCHAR, "waypoint_ident", String.class, "waypointIdent"),
            new JdbcTypeField(Types.VARCHAR, "waypoint_name", String.class, "waypointName"),
            new JdbcTypeField(Types.DECIMAL, "latitude", BigDecimal.class, "latitude"),
            new JdbcTypeField(Types.DECIMAL, "longitude", BigDecimal.class, "longitude"),
            new JdbcTypeField(Types.VARCHAR, "via_airway", String.class, "viaAirway"),
            new JdbcTypeField(Types.VARCHAR, "airway_ident", String.class, "airwayIdent"),
            new JdbcTypeField(Types.INTEGER, "bearing_to_next", Integer.class, "bearingToNext"),
            new JdbcTypeField(Types.INTEGER, "distance_to_next", Integer.class, "distanceToNext")
        );

        return type;
    }

    /**
     * Create configuration for cache "RunwayCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheRunwayCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("RunwayCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeRunway(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.Runway");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("recordtype", "java.lang.String");
        fields.put("sitenumber", "java.lang.String");
        fields.put("state", "java.lang.String");
        fields.put("runwayid", "java.lang.String");
        fields.put("runwaylength", "java.lang.Double");
        fields.put("runwaywidth", "java.lang.Double");
        fields.put("runwaysurfacetypecondition", "java.lang.String");
        fields.put("runwaysurfacetreatment", "java.lang.String");
        fields.put("pavementclass", "java.lang.String");
        fields.put("edgelightsintensity", "java.lang.String");
        fields.put("baseendid", "java.lang.String");
        fields.put("baseendtruealignment", "java.lang.Double");
        fields.put("baseendilstype", "java.lang.String");
        fields.put("baseendrighttrafficpattern", "java.lang.String");
        fields.put("baseendmarkingstype", "java.lang.String");
        fields.put("baseendmarkingscondition", "java.lang.String");
        fields.put("baseendphysicallatitude", "java.lang.String");
        fields.put("baseendphysicallatitudes", "java.lang.String");
        fields.put("baseendphysicallongitude", "java.lang.String");
        fields.put("baseendphysicallongitudes", "java.lang.String");
        fields.put("baseendphysicalelevation", "java.lang.Double");
        fields.put("baseendcrossingheight", "java.lang.Double");
        fields.put("baseendglidepathangle", "java.lang.Double");
        fields.put("baseenddisplacedlatitude", "java.lang.String");
        fields.put("baseenddisplacedlatitudes", "java.lang.String");
        fields.put("baseenddisplacedlongitude", "java.lang.String");
        fields.put("baseenddisplacedlongitudes", "java.lang.String");
        fields.put("baseenddisplacedelevation", "java.lang.Double");
        fields.put("baseenddisplacedlength", "java.lang.Double");
        fields.put("baseendtdzelevation", "java.lang.Double");
        fields.put("baseendvasi", "java.lang.String");
        fields.put("baseendrvr", "java.lang.String");
        fields.put("baseendrvv", "java.lang.String");
        fields.put("baseendals", "java.lang.String");
        fields.put("baseendreil", "java.lang.String");
        fields.put("baseendcenterlinelights", "java.lang.String");
        fields.put("baseendtouchdownlights", "java.lang.String");
        fields.put("baseendobjectdescription", "java.lang.String");
        fields.put("baseendobjectmarklight", "java.lang.String");
        fields.put("baseendpart77category", "java.lang.String");
        fields.put("baseendobjectclearslope", "java.lang.Double");
        fields.put("baseendobjectheight", "java.lang.Double");
        fields.put("baseendobjectdistance", "java.lang.Double");
        fields.put("baseendobjectoffset", "java.lang.String");
        fields.put("reciprocalendid", "java.lang.String");
        fields.put("reciprocalendtruealignment", "java.lang.Double");
        fields.put("reciprocalendilstype", "java.lang.String");
        fields.put("reciprocalendrighttrafficpattern", "java.lang.String");
        fields.put("reciprocalendmarkingstype", "java.lang.String");
        fields.put("reciprocalendmarkingscondition", "java.lang.String");
        fields.put("reciprocalendphysicallatitude", "java.lang.String");
        fields.put("reciprocalendphysicallatitudes", "java.lang.String");
        fields.put("reciprocalendphysicallongitude", "java.lang.String");
        fields.put("reciprocalendphysicallongitudes", "java.lang.String");
        fields.put("reciprocalendphysicalelevation", "java.lang.Double");
        fields.put("reciprocalendcrossingheight", "java.lang.Double");
        fields.put("reciprocalendglidepathangle", "java.lang.Double");
        fields.put("reciprocalenddisplacedlatitude", "java.lang.String");
        fields.put("reciprocalenddisplacedlatitudes", "java.lang.String");
        fields.put("reciprocalenddisplacedlongitude", "java.lang.String");
        fields.put("reciprocalenddisplacedlongitudes", "java.lang.String");
        fields.put("reciprocalenddisplacedelevation", "java.lang.String");
        fields.put("reciprocalenddisplacedlength", "java.lang.Double");
        fields.put("reciprocalendtdzelevation", "java.lang.Double");
        fields.put("reciprocalendvasi", "java.lang.String");
        fields.put("reciprocalendrvr", "java.lang.String");
        fields.put("reciprocalendrvv", "java.lang.String");
        fields.put("reciprocalendals", "java.lang.String");
        fields.put("reciprocalendreil", "java.lang.String");
        fields.put("reciprocalendcenterlinelights", "java.lang.String");
        fields.put("reciprocalendtouchdownlights", "java.lang.String");
        fields.put("reciprocalendobjectdescription", "java.lang.String");
        fields.put("reciprocalendobjectmarklight", "java.lang.String");
        fields.put("reciprocalendpart77category", "java.lang.String");
        fields.put("reciprocalendobjectclearslope", "java.lang.Double");
        fields.put("reciprocalendobjectheight", "java.lang.Double");
        fields.put("reciprocalendobjectdistance", "java.lang.Double");
        fields.put("reciprocalendobjectoffset", "java.lang.String");
        fields.put("runwaylengthsource", "java.lang.String");
        fields.put("runwaylengthsourcedate", "java.sql.Timestamp");
        fields.put("runwayweightbearingcapacitysw", "java.lang.Double");
        fields.put("runwayweightbearingcapacitydw", "java.lang.Double");
        fields.put("runwayweightbearingcapacitydwtandem", "java.lang.String");
        fields.put("runwayweightbearingcapacitydwdual", "java.lang.String");
        fields.put("baseendgradient", "java.lang.Double");
        fields.put("baseendgradientdirection", "java.lang.String");
        fields.put("baseendpositionsource", "java.lang.String");
        fields.put("baseendpositionsourcedate", "java.sql.Timestamp");
        fields.put("baseendelevationsource", "java.lang.String");
        fields.put("baseendelevationsourcedate", "java.sql.Timestamp");
        fields.put("baseenddisplacedthresholdpositionsource", "java.lang.String");
        fields.put("baseenddisplacedthresholdpositionsourcedate", "java.sql.Timestamp");
        fields.put("baseenddisplacedthresholdelevationsource", "java.lang.String");
        fields.put("baseenddisplacedthresholdelevationsourcedate", "java.sql.Timestamp");
        fields.put("baseendtouchdownzoneelevationsource", "java.lang.String");
        fields.put("baseendtouchdownzoneelevationsourcedate", "java.sql.Timestamp");
        fields.put("baseendtakeoffrunavailabletora", "java.lang.String");
        fields.put("baseendtakeoffdistanceavailabletoda", "java.lang.Double");
        fields.put("baseendacltstopdistanceavailableasda", "java.lang.Double");
        fields.put("baseendlandingdistanceavailablelda", "java.lang.Double");
        fields.put("baseendlandinglahso", "java.lang.String");
        fields.put("baseendlahsointersectrwyid", "java.lang.String");
        fields.put("baseendlahsointersectentity", "java.lang.String");
        fields.put("baseendlahsolatitude", "java.lang.String");
        fields.put("baseendlahsolatitudes", "java.lang.String");
        fields.put("baseendlahsolongitude", "java.lang.String");
        fields.put("baseendlahsolongitudes", "java.lang.String");
        fields.put("baseendlahsolatlongsource", "java.lang.String");
        fields.put("baseendlahsolatlongsourcedate", "java.sql.Timestamp");
        fields.put("reciprocalendgradient", "java.lang.Double");
        fields.put("reciprocalendgradientdirection", "java.lang.String");
        fields.put("reciprocalendpositionsource", "java.lang.String");
        fields.put("reciprocalendpositionsourcedate", "java.sql.Timestamp");
        fields.put("reciprocalendelevationsource", "java.lang.String");
        fields.put("reciprocalendelevationsourcedate", "java.sql.Timestamp");
        fields.put("reciprocalenddisplacedthresholdpositionsource", "java.lang.String");
        fields.put("reciprocalenddisplacedthresholdpositionsourcedate", "java.sql.Timestamp");
        fields.put("reciprocalenddisplacedthresholdelevationsource", "java.lang.String");
        fields.put("reciprocalenddisplacedthresholdelevationsourcedate", "java.sql.Timestamp");
        fields.put("reciprocalendtouchdownzoneelevationsource", "java.lang.String");
        fields.put("reciprocalendtouchdownzoneelevationsourcedate", "java.sql.Timestamp");
        fields.put("reciprocalendtakeoffrunavailabletora", "java.lang.String");
        fields.put("reciprocalendtakeoffdistanceavailabletoda", "java.lang.Double");
        fields.put("reciprocalendacltstopdistanceavailableasda", "java.lang.Double");
        fields.put("reciprocalendlandingdistanceavailablelda", "java.lang.Double");
        fields.put("reciprocalendlahso", "java.lang.String");
        fields.put("reciprocalendlahsointersectrwyid", "java.lang.String");
        fields.put("reciprocalendlahsointersectentity", "java.lang.String");
        fields.put("reciprocalendlahsolatitude", "java.lang.String");
        fields.put("reciprocalendlahsolatitudes", "java.lang.String");
        fields.put("reciprocalendlahsolongitude", "java.lang.String");
        fields.put("reciprocalendlahsolongitudes", "java.lang.String");
        fields.put("reciprocalendlahsolatlongsource", "java.lang.String");
        fields.put("reciprocalendlahsolatlongsourcedate", "java.sql.Timestamp");
        fields.put("blank", "java.lang.String");
        fields.put("id", "java.lang.Integer");

        qryEntity.setFields(fields);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeRunway".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeRunway(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.Runway");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("runway");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", int.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "RecordType", String.class, "recordtype"),
            new JdbcTypeField(Types.VARCHAR, "SiteNumber", String.class, "sitenumber"),
            new JdbcTypeField(Types.VARCHAR, "State", String.class, "state"),
            new JdbcTypeField(Types.VARCHAR, "RunwayID", String.class, "runwayid"),
            new JdbcTypeField(Types.DOUBLE, "RunwayLength", Double.class, "runwaylength"),
            new JdbcTypeField(Types.DOUBLE, "RunwayWidth", Double.class, "runwaywidth"),
            new JdbcTypeField(Types.VARCHAR, "RunwaySurfaceTypeCondition", String.class, "runwaysurfacetypecondition"),
            new JdbcTypeField(Types.VARCHAR, "RunwaySurfaceTreatment", String.class, "runwaysurfacetreatment"),
            new JdbcTypeField(Types.VARCHAR, "PavementClass", String.class, "pavementclass"),
            new JdbcTypeField(Types.VARCHAR, "EdgeLightsIntensity", String.class, "edgelightsintensity"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndID", String.class, "baseendid"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndTrueAlignment", Double.class, "baseendtruealignment"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndILSType", String.class, "baseendilstype"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndRightTrafficPattern", String.class, "baseendrighttrafficpattern"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndMarkingsType", String.class, "baseendmarkingstype"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndMarkingsCondition", String.class, "baseendmarkingscondition"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndPhysicalLatitude", String.class, "baseendphysicallatitude"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndPhysicalLatitudeS", String.class, "baseendphysicallatitudes"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndPhysicalLongitude", String.class, "baseendphysicallongitude"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndPhysicalLongitudeS", String.class, "baseendphysicallongitudes"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndPhysicalElevation", Double.class, "baseendphysicalelevation"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndCrossingHeight", Double.class, "baseendcrossingheight"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndGlidePathAngle", Double.class, "baseendglidepathangle"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndDisplacedLatitude", String.class, "baseenddisplacedlatitude"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndDisplacedLatitudeS", String.class, "baseenddisplacedlatitudes"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndDisplacedLongitude", String.class, "baseenddisplacedlongitude"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndDisplacedLongitudeS", String.class, "baseenddisplacedlongitudes"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndDisplacedElevation", Double.class, "baseenddisplacedelevation"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndDisplacedLength", Double.class, "baseenddisplacedlength"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndTDZElevation", Double.class, "baseendtdzelevation"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndVASI", String.class, "baseendvasi"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndRVR", String.class, "baseendrvr"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndRVV", String.class, "baseendrvv"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndALS", String.class, "baseendals"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndREIL", String.class, "baseendreil"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndCenterlineLights", String.class, "baseendcenterlinelights"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndTouchdownLights", String.class, "baseendtouchdownlights"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndObjectDescription", String.class, "baseendobjectdescription"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndObjectMarkLight", String.class, "baseendobjectmarklight"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndPart77Category", String.class, "baseendpart77category"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndObjectClearSlope", Double.class, "baseendobjectclearslope"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndObjectHeight", Double.class, "baseendobjectheight"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndObjectDistance", Double.class, "baseendobjectdistance"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndObjectOffset", String.class, "baseendobjectoffset"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndID", String.class, "reciprocalendid"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndTrueAlignment", Double.class, "reciprocalendtruealignment"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndILSType", String.class, "reciprocalendilstype"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndRightTrafficPattern", String.class, "reciprocalendrighttrafficpattern"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndMarkingsType", String.class, "reciprocalendmarkingstype"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndMarkingsCondition", String.class, "reciprocalendmarkingscondition"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndPhysicalLatitude", String.class, "reciprocalendphysicallatitude"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndPhysicalLatitudeS", String.class, "reciprocalendphysicallatitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndPhysicalLongitude", String.class, "reciprocalendphysicallongitude"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndPhysicalLongitudeS", String.class, "reciprocalendphysicallongitudes"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndPhysicalElevation", Double.class, "reciprocalendphysicalelevation"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndCrossingHeight", Double.class, "reciprocalendcrossingheight"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndGlidePathAngle", Double.class, "reciprocalendglidepathangle"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedLatitude", String.class, "reciprocalenddisplacedlatitude"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedLatitudeS", String.class, "reciprocalenddisplacedlatitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedLongitude", String.class, "reciprocalenddisplacedlongitude"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedLongitudeS", String.class, "reciprocalenddisplacedlongitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedElevation", String.class, "reciprocalenddisplacedelevation"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndDisplacedLength", Double.class, "reciprocalenddisplacedlength"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndTDZElevation", Double.class, "reciprocalendtdzelevation"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndVASI", String.class, "reciprocalendvasi"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndRVR", String.class, "reciprocalendrvr"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndRVV", String.class, "reciprocalendrvv"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndALS", String.class, "reciprocalendals"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndREIL", String.class, "reciprocalendreil"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndCenterlineLights", String.class, "reciprocalendcenterlinelights"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndTouchdownLights", String.class, "reciprocalendtouchdownlights"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndObjectDescription", String.class, "reciprocalendobjectdescription"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndObjectMarkLight", String.class, "reciprocalendobjectmarklight"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndPart77Category", String.class, "reciprocalendpart77category"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndObjectClearSlope", Double.class, "reciprocalendobjectclearslope"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndObjectHeight", Double.class, "reciprocalendobjectheight"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndObjectDistance", Double.class, "reciprocalendobjectdistance"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndObjectOffset", String.class, "reciprocalendobjectoffset"),
            new JdbcTypeField(Types.VARCHAR, "RunwayLengthSource", String.class, "runwaylengthsource"),
            new JdbcTypeField(Types.TIMESTAMP, "RunwayLengthSourceDate", Timestamp.class, "runwaylengthsourcedate"),
            new JdbcTypeField(Types.DOUBLE, "RunwayWeightBearingCapacitySW", Double.class, "runwayweightbearingcapacitysw"),
            new JdbcTypeField(Types.DOUBLE, "RunwayWeightBearingCapacityDW", Double.class, "runwayweightbearingcapacitydw"),
            new JdbcTypeField(Types.VARCHAR, "RunwayWeightBearingCapacityDWTandem", String.class, "runwayweightbearingcapacitydwtandem"),
            new JdbcTypeField(Types.VARCHAR, "RunwayWeightBearingCapacityDWDual", String.class, "runwayweightbearingcapacitydwdual"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndGradient", Double.class, "baseendgradient"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndGradientDirection", String.class, "baseendgradientdirection"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndPositionSource", String.class, "baseendpositionsource"),
            new JdbcTypeField(Types.TIMESTAMP, "BaseEndPositionSourceDate", Timestamp.class, "baseendpositionsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndElevationSource", String.class, "baseendelevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "BaseEndElevationSourceDate", Timestamp.class, "baseendelevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndDisplacedThresholdPositionSource", String.class, "baseenddisplacedthresholdpositionsource"),
            new JdbcTypeField(Types.TIMESTAMP, "BaseEndDisplacedThresholdPositionSourceDate", Timestamp.class, "baseenddisplacedthresholdpositionsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndDisplacedThresholdElevationSource", String.class, "baseenddisplacedthresholdelevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "BaseEndDisplacedThresholdElevationSourceDate", Timestamp.class, "baseenddisplacedthresholdelevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndTouchdownZoneElevationSource", String.class, "baseendtouchdownzoneelevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "BaseEndTouchdownZoneElevationSourceDate", Timestamp.class, "baseendtouchdownzoneelevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndTakeOffRunAvailableTORA", String.class, "baseendtakeoffrunavailabletora"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndTakeOffDistanceAvailableTODA", Double.class, "baseendtakeoffdistanceavailabletoda"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndAcltStopDistanceAvailableASDA", Double.class, "baseendacltstopdistanceavailableasda"),
            new JdbcTypeField(Types.DOUBLE, "BaseEndLandingDistanceAvailableLDA", Double.class, "baseendlandingdistanceavailablelda"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLandingLAHSO", String.class, "baseendlandinglahso"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOIntersectRwyId", String.class, "baseendlahsointersectrwyid"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOIntersectEntity", String.class, "baseendlahsointersectentity"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOLatitude", String.class, "baseendlahsolatitude"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOLatitudeS", String.class, "baseendlahsolatitudes"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOLongitude", String.class, "baseendlahsolongitude"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOLongitudeS", String.class, "baseendlahsolongitudes"),
            new JdbcTypeField(Types.VARCHAR, "BaseEndLAHSOLatLongSource", String.class, "baseendlahsolatlongsource"),
            new JdbcTypeField(Types.TIMESTAMP, "BaseEndLAHSOLatLongSourceDate", Timestamp.class, "baseendlahsolatlongsourcedate"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndGradient", Double.class, "reciprocalendgradient"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndGradientDirection", String.class, "reciprocalendgradientdirection"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndPositionSource", String.class, "reciprocalendpositionsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ReciprocalEndPositionSourceDate", Timestamp.class, "reciprocalendpositionsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndElevationSource", String.class, "reciprocalendelevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ReciprocalEndElevationSourceDate", Timestamp.class, "reciprocalendelevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedThresholdPositionSource", String.class, "reciprocalenddisplacedthresholdpositionsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ReciprocalEndDisplacedThresholdPositionSourceDate", Timestamp.class, "reciprocalenddisplacedthresholdpositionsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndDisplacedThresholdElevationSource", String.class, "reciprocalenddisplacedthresholdelevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ReciprocalEndDisplacedThresholdElevationSourceDate", Timestamp.class, "reciprocalenddisplacedthresholdelevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndTouchdownZoneElevationSource", String.class, "reciprocalendtouchdownzoneelevationsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ReciprocalEndTouchdownZoneElevationSourceDate", Timestamp.class, "reciprocalendtouchdownzoneelevationsourcedate"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndTakeOffRunAvailableTORA", String.class, "reciprocalendtakeoffrunavailabletora"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndTakeOffDistanceAvailableTODA", Double.class, "reciprocalendtakeoffdistanceavailabletoda"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndAcltStopDistanceAvailableASDA", Double.class, "reciprocalendacltstopdistanceavailableasda"),
            new JdbcTypeField(Types.DOUBLE, "ReciprocalEndLandingDistanceAvailableLDA", Double.class, "reciprocalendlandingdistanceavailablelda"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSO", String.class, "reciprocalendlahso"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOIntersectRwyId", String.class, "reciprocalendlahsointersectrwyid"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOIntersectEntity", String.class, "reciprocalendlahsointersectentity"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOLatitude", String.class, "reciprocalendlahsolatitude"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOLatitudeS", String.class, "reciprocalendlahsolatitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOLongitude", String.class, "reciprocalendlahsolongitude"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOLongitudeS", String.class, "reciprocalendlahsolongitudes"),
            new JdbcTypeField(Types.VARCHAR, "ReciprocalEndLAHSOLatLongSource", String.class, "reciprocalendlahsolatlongsource"),
            new JdbcTypeField(Types.TIMESTAMP, "ReciprocalEndLAHSOLatLongSourceDate", Timestamp.class, "reciprocalendlahsolatlongsourcedate"),
            new JdbcTypeField(Types.LONGVARCHAR, "Blank", String.class, "blank")
        );

        return type;
    }

    /**
     * Create configuration for cache "TelemetryCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheTelemetryCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("TelemetryCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeTelemetry(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.pluralsight.duckair.model.Telemetry");
        qryEntity.setKeyFieldName("rowId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("rowId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("lastUpdate", "java.sql.Timestamp");
        fields.put("routeId", "java.lang.String");
        fields.put("flightNumber", "java.lang.String");
        fields.put("altitude", "java.lang.Integer");
        fields.put("airspeed", "java.lang.Integer");
        fields.put("heading", "java.lang.Integer");
        fields.put("currentSegment", "java.lang.Integer");
        fields.put("positionLatitude", "java.math.BigDecimal");
        fields.put("positionLongitude", "java.math.BigDecimal");
        fields.put("rowId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("rowId", "row_id");
        aliases.put("lastUpdate", "last_update");
        aliases.put("routeId", "route_id");
        aliases.put("flightNumber", "flight_number");
        aliases.put("currentSegment", "current_segment");
        aliases.put("positionLatitude", "position_latitude");
        aliases.put("positionLongitude", "position_longitude");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeTelemetry".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeTelemetry(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("com.pluralsight.duckair.model.Telemetry");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("telemetry");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "row_id", String.class, "rowId"));

        type.setValueFields(
            new JdbcTypeField(Types.TIMESTAMP, "last_update", Timestamp.class, "lastUpdate"),
            new JdbcTypeField(Types.VARCHAR, "route_id", String.class, "routeId"),
            new JdbcTypeField(Types.VARCHAR, "flight_number", String.class, "flightNumber"),
            new JdbcTypeField(Types.INTEGER, "altitude", Integer.class, "altitude"),
            new JdbcTypeField(Types.INTEGER, "airspeed", Integer.class, "airspeed"),
            new JdbcTypeField(Types.INTEGER, "heading", Integer.class, "heading"),
            new JdbcTypeField(Types.INTEGER, "current_segment", Integer.class, "currentSegment"),
            new JdbcTypeField(Types.DECIMAL, "position_latitude", BigDecimal.class, "positionLatitude"),
            new JdbcTypeField(Types.DECIMAL, "position_longitude", BigDecimal.class, "positionLongitude")
        );

        return type;
    }

    /**
     * Create configuration for cache "WindsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheWindsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("WindsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DuckAirlines;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeWinds(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.pluralsight.duckair.model.Winds");
        qryEntity.setKeyFieldName("windsId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("windsId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("station", "java.lang.String");
        fields.put("altitude", "java.lang.Integer");
        fields.put("direction", "java.lang.Integer");
        fields.put("speed", "java.lang.Integer");
        fields.put("tempurature", "java.lang.Integer");
        fields.put("windsId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("windsId", "winds_id");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeWinds".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeWinds(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.pluralsight.duckair.model.Winds");
        type.setDatabaseSchema("duck_airlines");
        type.setDatabaseTable("winds");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "winds_id", int.class, "windsId"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "station", String.class, "station"),
            new JdbcTypeField(Types.INTEGER, "altitude", Integer.class, "altitude"),
            new JdbcTypeField(Types.INTEGER, "direction", Integer.class, "direction"),
            new JdbcTypeField(Types.INTEGER, "speed", Integer.class, "speed"),
            new JdbcTypeField(Types.INTEGER, "tempurature", Integer.class, "tempurature")
        );

        return type;
    }
}